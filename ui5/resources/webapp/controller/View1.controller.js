sap.ui.define(["sap/ui/core/mvc/Controller"], function(Controller) {
	"use strict";
	return Controller.extend("sandbox.ui5.controller.View1", {
		/**
		 *@memberOf sandbox.ui5.controller.View1
		 */
		onInit: function() {
			console.log("INITING");
			var oModel = new sap.ui.model.json.JSONModel();
			oModel.setData({
				test1: "Demo Application",
				test2: "application"
			});
			this.getView().setModel(oModel, "testModel");
			// console.log(oModel);
			var oModel = new sap.ui.model.odata.v2.ODataModel("/xsodata/lines.xsodata/");
			this.getView().setModel(oModel, "lineModel");
			console.log(oModel);
			console.log(oModel['oData']);
			
			var oTable = this.getView().byId("sTable");
			oTable.setModel(oModel);
		},
		onAfterRendering: function() {
			console.log("done rendering.");
		},
		action: function(oEvent) {
			var that = this;
			var actionParameters = JSON.parse(oEvent.getSource().data("wiring").replace(/'/g, "\""));
			var eventType = oEvent.getId();
			var aTargets = actionParameters[eventType].targets || [];
			aTargets.forEach(function(oTarget) {
				var oControl = that.byId(oTarget.id);
				if (oControl) {
					var oParams = {};
					for (var prop in oTarget.parameters) {
						oParams[prop] = oEvent.getParameter(oTarget.parameters[prop]);
					}
					oControl[oTarget.action](oParams);
				}
			});
			var oNavigation = actionParameters[eventType].navigation;
			if (oNavigation) {
				var oParams = {};
				(oNavigation.keys || []).forEach(function(prop) {
					oParams[prop.name] = encodeURIComponent(JSON.stringify({
						value: oEvent.getSource().getBindingContext(oNavigation.model).getProperty(prop.name),
						type: prop.type
					}));
				});
				if (Object.getOwnPropertyNames(oParams).length !== 0) {
					this.getOwnerComponent().getRouter().navTo(oNavigation.routeName, oParams);
				} else {
					this.getOwnerComponent().getRouter().navTo(oNavigation.routeName);
				}
			}
		},
		/**
		 *@memberOf sandbox.ui5.controller.View1
		 */
		copyButton: function() {
			var txt = this.getView().byId("ocrText").getText();
			navigator.clipboard.writeText(txt).then(function() {
				console.log('Async: Copying to clipboard was successful!');
				sap.m.MessageToast.show("Text copied to clipboard.", {});
			}, function(err) {
				console.error('Async: Could not copy text: ', err);
			});
		},
		testButton: function() {
			$.ajax({
				url: '/node/ocr/line/',
				type: 'post',
				success: (data) => {
					console.log(data);
				},
				error: (err) => {
					console.log("error:" + err);
				}
			});
		},
		uploadFile: function(oEvent) {
			//This code was generated by the layout editor.
			// Collect input data
			var fileUploader = this.getView().byId("fileUploader");
			var busyIndicator = this.getView().byId("busyIndicator");
			var txtButton = this.getView().byId("txtButton");
			var xmlButton = this.getView().byId("xmlButton");
			var pageSegModeBox = this.getView().byId("pageSegModeBox");
			var modelTypeBox = this.getView().byId("modelTypeBox");
			var output_type;
			var ocrText = this.getView().byId("ocrText");
			if (txtButton.getSelected()) {
				output_type = "txt";
			} else {
				output_type = "xml";
			}
			if (!fileUploader.getValue()) {
				sap.m.MessageToast.show("Choose a file first");
				return;
			}
			var that = this;

			//Create options as per api
			var options = {
				"lang": "en",
				"outputType": output_type,
				"pageSegMode": pageSegModeBox.getSelectedKey(),
				"modelType": modelTypeBox.getSelectedKey()
			};
			// console.log(options);
			var optionsStringy = JSON.stringify(options);
			// Collect uploaded file
			var domRef = fileUploader.getFocusDomRef();
			var file = domRef.files[0];
			var fileName = file.name;
			// Create FormData and append required data
			var formData = new FormData();
			formData.append("files", file, fileName);
			formData.append("options", optionsStringy);
			console.log(file);
			console.log(optionsStringy);

			// Call backend to get ocr options, like apikey and url
			// then call ocr api with returned data, and data collected from front end.
			$.ajax({
				url: '/node/ocr/options/',
				type: 'get',
				success: (data) => {
					busyIndicator.setVisible(true);
					ocrRequest(data, formData);
				},
				error: (err) => {
					console.log("error:" + err);
				}
			});
			var ocrRequest = (options, form) => {
				console.log("Calling ocr api with options...");
				$.ajax({
					url: options.url,
					headers: {
						'apiKey': options.apiKey,
						'Accept': 'application/json'
					},
					'Accept': 'application/json',
					type: 'post',
					contentType: false,
					processData: false,
					// formData:form,
					data: form,
					success: (data) => {
						console.log(data);
						// console.log(data['predictions'][0]);
						var textRes = data['predictions'][0];
						var lines = textRes.split("\n");
						var cleaned = this.cleanLines(lines);
						ocrText.setText(cleaned);
						ocrText.setVisible(true);
						busyIndicator.setVisible(false);
					},
					error: (err) => {
						console.log(err);
					}
				});
			};
		},
		cleanLines: function(lines) {
			var cleaned = "";
			for (var i = 0; i < lines.length; i++) {
				// console.log(lines[i].replace(/\s/g,"").length);
				if (lines[i].replace(/\s/g, "").length > 0) {
					if (cleaned === "") {
						cleaned += lines[i];
					} else {
						cleaned += "\n" + lines[i];
					}
				}
			}
			return cleaned;
		}
	});
});