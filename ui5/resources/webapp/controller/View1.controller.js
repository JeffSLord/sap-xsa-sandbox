sap.ui.define(["sap/ui/core/mvc/Controller"], function(Controller) {
	"use strict";
	return Controller.extend("sandbox.ui5.controller.View1", {
		/**
		 *@memberOf sandbox.ui5.controller.View1
		 */
		onInit: function() {
			console.log("INITING");
			var oModel = new sap.ui.model.json.JSONModel();
			oModel.setData({
				test1: "Demo Application",
				test2: "application"
			});
			this.getView().setModel(oModel, "testModel");
			var oModel = new sap.ui.model.json.JSONModel();
			oModel.setData({
				fileName: ""
			});
			this.getView().setModel(oModel, "currentFileModel");
			// console.log(oModel);
			var oModel = new sap.ui.model.odata.v2.ODataModel("/xsodata/lines.xsodata/");
			this.getView().setModel(oModel, "lineModel");
			// console.log(oModel);
			// console.log(oModel['oData']);

			var oTable = this.getView().byId("sTable");
			oTable.setModel(oModel);
		},
		onAfterRendering: function() {
			console.log("done rendering.");
		},
		action: function(oEvent) {
			var that = this;
			var actionParameters = JSON.parse(oEvent.getSource().data("wiring").replace(/'/g, "\""));
			var eventType = oEvent.getId();
			var aTargets = actionParameters[eventType].targets || [];
			aTargets.forEach(function(oTarget) {
				var oControl = that.byId(oTarget.id);
				if (oControl) {
					var oParams = {};
					for (var prop in oTarget.parameters) {
						oParams[prop] = oEvent.getParameter(oTarget.parameters[prop]);
					}
					oControl[oTarget.action](oParams);
				}
			});
			var oNavigation = actionParameters[eventType].navigation;
			if (oNavigation) {
				var oParams = {};
				(oNavigation.keys || []).forEach(function(prop) {
					oParams[prop.name] = encodeURIComponent(JSON.stringify({
						value: oEvent.getSource().getBindingContext(oNavigation.model).getProperty(prop.name),
						type: prop.type
					}));
				});
				if (Object.getOwnPropertyNames(oParams).length !== 0) {
					this.getOwnerComponent().getRouter().navTo(oNavigation.routeName, oParams);
				} else {
					this.getOwnerComponent().getRouter().navTo(oNavigation.routeName);
				}
			}
		},
		/**
		 *@memberOf sandbox.ui5.controller.View1
		 */
		copyButton: function() {
			var txt = this.getView().byId("ocrText").getText();
			navigator.clipboard.writeText(txt).then(function() {
				console.log('Async: Copying to clipboard was successful!');
				sap.m.MessageToast.show("Text copied to clipboard.", {});
			}, function(err) {
				console.error('Async: Could not copy text: ', err);
			});
		},
		testButton: function() {
			$.ajax({
				url: '/node/ocr/line/',
				type: 'post',
				success: (data) => {
					console.log(data);
				},
				error: (err) => {
					console.log("error:" + err);
				}
			});
		},
		uploadFile: function(oEvent) {
			//This code was generated by the layout editor.
			// Collect input data
			var fileUploader = this.getView().byId("fileUploader");
			var busyIndicator = this.getView().byId("busyIndicator");
			var textPanel = this.getView().byId("textPanel");
			var tablePanel = this.getView().byId("tablePanel");
			var settingsPanel = this.getView().byId("settingsPanel");
			var txtButton = this.getView().byId("txtButton");
			var xmlButton = this.getView().byId("xmlButton");
			var pageSegModeBox = this.getView().byId("pageSegModeBox");
			var modelTypeBox = this.getView().byId("modelTypeBox");
			var output_type;
			var ocrText = this.getView().byId("ocrText");
			if (txtButton.getSelected()) {
				output_type = "txt";
			} else {
				output_type = "xml";
			}
			if (!fileUploader.getValue()) {
				sap.m.MessageToast.show("Choose a file first");
				return;
			}
			var that = this;

			//Create options as per api
			var options = {
				"lang": "en",
				"outputType": output_type,
				"pageSegMode": pageSegModeBox.getSelectedKey(),
				"modelType": modelTypeBox.getSelectedKey()
			};
			// console.log(options);
			var optionsStringy = JSON.stringify(options);
			// Collect uploaded file
			var domRef = fileUploader.getFocusDomRef();
			var file = domRef.files[0];
			var fileName = file.name;
			// Add to the currentFileModel
			var oModel = this.getView().getModel("currentFileModel");
			console.log(oModel);
			oModel.setProperty('/fileName', fileName);
			oModel.refresh();
			console.log(oModel);
			// Create FormData and append required data
			var formData = new FormData();
			formData.append("files", file, fileName);
			formData.append("options", optionsStringy);
			console.log(file);
			console.log(optionsStringy);

			ocrText.setText("");
			settingsPanel.setExpanded(false);
			busyIndicator.setVisible(true);
			textPanel.setExpanded(true);
			textPanel.setBusy(true);
			tablePanel.setBusy(true);
			// ocrRequest(data, formData);
			console.log("Calling ocr api with options...");
			$.ajax({
				// url: options.url,
				url: 'https://sandbox.api.sap.com/ml/ocr/ocr/',
				timeout: 360000,
				headers: {
					'apiKey': 'QEkc0UduJQtxhBA3oVAdbpzCda0qFPSe',
					'Accept': 'application/json'
				},
				'Accept': 'application/json',
				type: 'post',
				contentType: false,
				processData: false,
				// formData:form,
				data: formData,
				success: (data) => {
					console.log("OCR Successful.");
					// console.log(data);
					// console.log(data['predictions'][0]);
					var textRes = data['predictions'][0];
					var lines = textRes.split("\n");
					var cleanedArr = this.cleanLines(lines);
					console.log(cleanedArr);
					var cleanString = "";
					for (var i = 0; i < cleanedArr.length; i++) {
						cleanString += cleanedArr[i] + '\n';
					}
					console.log("Deleting table...");
					$.ajax({
						url: '/node/ocr/linedelete',
						timeout: 360000,
						type: 'post',
						success: () => {
							this.getView().getModel('lineModel').refresh();
							for (var i = 0; i < cleanedArr.length; i++) {
								var newData = {
									fileName: this.getView().getModel('currentFileModel').getProperty('/fileName'),
									pageNum: '1',
									lineNum: i,
									line: cleanedArr[i]
								};
								$.ajax({
									url: '/node/ocr/line/',
									timeout: 3600,
									type: 'post',
									data: newData,
									success: (data) => {
										// console.log(data);
										this.getView().getModel('lineModel').refresh();
									},
									error: (err) => {}
								});
							}
						},
						error: () => {}
							// var newData = {
							// 	fileName: this.getView().getModel('currentFileModel').getProperty('/fileName'),
							// 	pageNum: '1',
							// 	lines: cleanedArr
							// };
							// newData = JSON.stringify(newData);
							// console.log(newData);
							// console.log("Inserting new data...");
							// $.ajax({
							// 	url: '/node/ocr/lineMany/',
							// 	timeout: 3600,
							// 	type: 'post',
							// 	data: newData,
							// 	success: (data) => {
							// 		// console.log(data);
							// 		this.getView().getModel('lineModel').refresh();
							// 	},
							// 	error: (err) => {}
							// });
					});
					ocrText.setText(cleanString);
					ocrText.setVisible(true);
					busyIndicator.setVisible(false);
					textPanel.setBusy(false);
					tablePanel.setBusy(false);
				},
				error: (err) => {
					console.log(err);
				}

			});

		},

		cleanLines: function(lines) {
			var cleaned = "";
			var cleaned = [];
			for (var i = 0; i < lines.length; i++) {
				// console.log(lines[i].replace(/\s/g,"").length);
				if (lines[i].replace(/\s/g, "").length > 0) {
					// if (cleaned === "") {
					// 	cleaned += lines[i];
					// } else {
					// 	cleaned += "\n" + lines[i];
					// }
					cleaned.push(lines[i]);
				}
			}
			return cleaned;
		}
	});
});